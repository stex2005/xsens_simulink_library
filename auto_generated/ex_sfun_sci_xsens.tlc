%% file : ex_sfun_sci_xsens.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for ex_sfun_sci_xsens
%% 
%% Simulink version      : 9.0 (R2017b) 24-Jul-2017
%% TLC file generated on : 18-Oct-2021 09:54:32

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'ex_sfun_sci_xsens';
     def.OutputFcnSpec = 'void output_xsens(void **work1, double y1[160], double y2[160], double y3[160], double y4[160], double y5[160], double y6[160], double y7[160], double y8[160], double y9[160], double y10[160])';
     def.StartFcnSpec = 'void init_xsens(void **work1, uint8 p1[], uint32 size(p1, 1),uint8 p2[], uint32 size(p2, 1), uint8 p3[], uint32 size(p3, 1), uint8 p4[], uint32 size(p4, 1),uint8 p5[], uint32 size(p5, 1), uint8 p6[], uint32 size(p6, 1),uint8 p7[], uint32 size(p7, 1), uint8 p8[], uint32 size(p8, 1), uint8 p9[], uint32 size(p9, 1),uint8 p10[], uint32 size(p10, 1), uint8 p11[], uint32 size(p11, 1),uint32 p12, uint32 p13)';
     def.TerminateFcnSpec = 'void terminate_xsens(void **work1)';
     def.HeaderFiles = {'sci_xsens.hpp', 'xsens.h', 'serialkey.h'};
     def.SourceFiles = {'xsens.cpp', 'serialkey.cpp'};
     def.HostLibFiles = {'libxsensdeviceapi.so', 'libxstypes.so'};
     def.TargetLibFiles = {'libxsensdeviceapi.so', 'libxstypes.so'};
     def.IncPaths = {'/home/fes/Documenti/CybathlonOLD/Xsens_SDG/Lib_Xsens/inc'};
     def.SrcPaths = {'/home/fes/Documenti/CybathlonOLD/Xsens_SDG/Lib_Xsens/src'};
     def.LibPaths = {'/usr/local/lib/xsens/lib'};
     def.SampleTime = 'parameterized';
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements ex_sfun_sci_xsens "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget()
        %assign hFileName = FcnGenerateUniqueFileName("ex_sfun_sci_xsens_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern void ex_sfun_sci_xsens_wrapper_Start( void** work1, const uint8_T* p1, const uint32_T expr1, const uint8_T* p2, const uint32_T expr2, const uint8_T* p3, const uint32_T expr3, const uint8_T* p4, const uint32_T expr4, const uint8_T* p5, const uint32_T expr5, const uint8_T* p6, const uint32_T expr6, const uint8_T* p7, const uint32_T expr7, const uint8_T* p8, const uint32_T expr8, const uint8_T* p9, const uint32_T expr9, const uint8_T* p10, const uint32_T expr10, const uint8_T* p11, const uint32_T expr11, const uint32_T p12, const uint32_T p13);
        extern void ex_sfun_sci_xsens_wrapper_Output( void** work1,  real_T* y1,  real_T* y2,  real_T* y3,  real_T* y4,  real_T* y5,  real_T* y6,  real_T* y7,  real_T* y8,  real_T* y9,  real_T* y10);
        extern void ex_sfun_sci_xsens_wrapper_Terminate( void** work1);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("ex_sfun_sci_xsens_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "sci_xsens.hpp"
        #include "xsens.h"
        #include "serialkey.h"

        extern "C" {
        void ex_sfun_sci_xsens_wrapper_Start( void** work1, const uint8_T* p1, const uint32_T expr1, const uint8_T* p2, const uint32_T expr2, const uint8_T* p3, const uint32_T expr3, const uint8_T* p4, const uint32_T expr4, const uint8_T* p5, const uint32_T expr5, const uint8_T* p6, const uint32_T expr6, const uint8_T* p7, const uint32_T expr7, const uint8_T* p8, const uint32_T expr8, const uint8_T* p9, const uint32_T expr9, const uint8_T* p10, const uint32_T expr10, const uint8_T* p11, const uint32_T expr11, const uint32_T p12, const uint32_T p13) {
            init_xsens(work1, (uint8_T*)(p1), (uint32_T)(expr1), (uint8_T*)(p2), (uint32_T)(expr2), (uint8_T*)(p3), (uint32_T)(expr3), (uint8_T*)(p4), (uint32_T)(expr4), (uint8_T*)(p5), (uint32_T)(expr5), (uint8_T*)(p6), (uint32_T)(expr6), (uint8_T*)(p7), (uint32_T)(expr7), (uint8_T*)(p8), (uint32_T)(expr8), (uint8_T*)(p9), (uint32_T)(expr9), (uint8_T*)(p10), (uint32_T)(expr10), (uint8_T*)(p11), (uint32_T)(expr11), (uint32_T)(p12), (uint32_T)(p13));
        }
        }

        extern "C" {
        void ex_sfun_sci_xsens_wrapper_Output( void** work1,  real_T* y1,  real_T* y2,  real_T* y3,  real_T* y4,  real_T* y5,  real_T* y6,  real_T* y7,  real_T* y8,  real_T* y9,  real_T* y10) {
            output_xsens(work1, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10);
        }
        }

        extern "C" {
        void ex_sfun_sci_xsens_wrapper_Terminate( void** work1) {
            terminate_xsens(work1);
        }
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("sci_xsens.hpp")>
        %<LibAddToCommonIncludes("xsens.h")>
        %<LibAddToCommonIncludes("serialkey.h")>
    %endif
    %<SLibAddToStaticSources("xsens.cpp")>
    %<SLibAddToStaticSources("serialkey.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget()
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget()
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign expr1_val = LibBlockParameterWidth(p1)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign expr2_val = LibBlockParameterWidth(p2)
        %assign p3_ptr = LibBlockParameterBaseAddr(p3)
        %assign expr3_val = LibBlockParameterWidth(p3)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign expr4_val = LibBlockParameterWidth(p4)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign expr5_val = LibBlockParameterWidth(p5)
        %assign p6_ptr = LibBlockParameterBaseAddr(p6)
        %assign expr6_val = LibBlockParameterWidth(p6)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign expr7_val = LibBlockParameterWidth(p7)
        %assign p8_ptr = LibBlockParameterBaseAddr(p8)
        %assign expr8_val = LibBlockParameterWidth(p8)
        %assign p9_ptr = LibBlockParameterBaseAddr(p9)
        %assign expr9_val = LibBlockParameterWidth(p9)
        %assign p10_ptr = LibBlockParameterBaseAddr(p10)
        %assign expr10_val = LibBlockParameterWidth(p10)
        %assign p11_ptr = LibBlockParameterBaseAddr(p11)
        %assign expr11_val = LibBlockParameterWidth(p11)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %assign p13_val = LibBlockParameter(p13, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        ex_sfun_sci_xsens_wrapper_Start(%<work1_ptr>, %<p1_ptr>, (uint32_T)%<expr1_val>, %<p2_ptr>, (uint32_T)%<expr2_val>, %<p3_ptr>, (uint32_T)%<expr3_val>, %<p4_ptr>, (uint32_T)%<expr4_val>, %<p5_ptr>, (uint32_T)%<expr5_val>, %<p6_ptr>, (uint32_T)%<expr6_val>, %<p7_ptr>, (uint32_T)%<expr7_val>, %<p8_ptr>, (uint32_T)%<expr8_val>, %<p9_ptr>, (uint32_T)%<expr9_val>, %<p10_ptr>, (uint32_T)%<expr10_val>, %<p11_ptr>, (uint32_T)%<expr11_val>, %<p12_val>, %<p13_val>);
    %else
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign p1_ptr = LibBlockParameterBaseAddr(p1)
        %assign expr1_val = LibBlockParameterWidth(p1)
        %assign p2_ptr = LibBlockParameterBaseAddr(p2)
        %assign expr2_val = LibBlockParameterWidth(p2)
        %assign p3_ptr = LibBlockParameterBaseAddr(p3)
        %assign expr3_val = LibBlockParameterWidth(p3)
        %assign p4_ptr = LibBlockParameterBaseAddr(p4)
        %assign expr4_val = LibBlockParameterWidth(p4)
        %assign p5_ptr = LibBlockParameterBaseAddr(p5)
        %assign expr5_val = LibBlockParameterWidth(p5)
        %assign p6_ptr = LibBlockParameterBaseAddr(p6)
        %assign expr6_val = LibBlockParameterWidth(p6)
        %assign p7_ptr = LibBlockParameterBaseAddr(p7)
        %assign expr7_val = LibBlockParameterWidth(p7)
        %assign p8_ptr = LibBlockParameterBaseAddr(p8)
        %assign expr8_val = LibBlockParameterWidth(p8)
        %assign p9_ptr = LibBlockParameterBaseAddr(p9)
        %assign expr9_val = LibBlockParameterWidth(p9)
        %assign p10_ptr = LibBlockParameterBaseAddr(p10)
        %assign expr10_val = LibBlockParameterWidth(p10)
        %assign p11_ptr = LibBlockParameterBaseAddr(p11)
        %assign expr11_val = LibBlockParameterWidth(p11)
        %assign p12_val = LibBlockParameter(p12, "", "", 0)
        %assign p13_val = LibBlockParameter(p13, "", "", 0)
        %% 
        init_xsens(%<work1_ptr>, (uint8_T*)%<p1_ptr>, %<expr1_val>, (uint8_T*)%<p2_ptr>, %<expr2_val>, (uint8_T*)%<p3_ptr>, %<expr3_val>, (uint8_T*)%<p4_ptr>, %<expr4_val>, (uint8_T*)%<p5_ptr>, %<expr5_val>, (uint8_T*)%<p6_ptr>, %<expr6_val>, (uint8_T*)%<p7_ptr>, %<expr7_val>, (uint8_T*)%<p8_ptr>, %<expr8_val>, (uint8_T*)%<p9_ptr>, %<expr9_val>, (uint8_T*)%<p10_ptr>, %<expr10_val>, (uint8_T*)%<p11_ptr>, %<expr11_val>, %<p12_val>, %<p13_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget()
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        ex_sfun_sci_xsens_wrapper_Output(%<work1_ptr>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>);
    %else
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_ptr = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_ptr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign y10_ptr = LibBlockOutputSignalAddr(9, "", "", 0)
        %% 
        output_xsens(%<work1_ptr>, %<y1_ptr>, %<y2_ptr>, %<y3_ptr>, %<y4_ptr>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>, %<y10_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget()
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        ex_sfun_sci_xsens_wrapper_Terminate(%<work1_ptr>);
    %else
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %% 
        terminate_xsens(%<work1_ptr>);
    %endif
%endfunction

%% [EOF]
